"""
Django settings for ansible_ui project.

Generated by 'django-admin startproject' using Django 2.1.8.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '8r$u&u(amvxkg179@-8u9_2rwfiyg2=c2_hehne=6+2whjmu^n'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'public',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ansible_ui.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates', ], #    # 为所有 template 文件指定一个根目录，同时我们在代码目录下新建该目录；mkdir templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ansible_ui.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),    # 指定静态资源的初始路径，项目部署我们会使用 nginx ，现在需要设置一下
)

# 添加行
LOGIN_URL = '/account/login'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,    # 避免与项目其他部分的日志系统冲突
    # 设置了 4 个日志格式
    'formatters': {
        'verbose': {'format': '%(asctime)s %(levelname)s %(funcName)s %(pathname)s:%(lineno)s %(message)s'},
        'custom': {'format': '%(asctime)s %(levelname)s %(module)s %(funcName)s %(pathname)s:%(lineno)s %(message)s'},
        'simple': {'format': '%(asctime)s %(levelname)s %(module)s %(message)s'},
        'basic': {'format': '%(asctime)s %(levelname)s %(message)s'}
    },
    # 日志过滤器
    'filters': {},
    'handlers': {    # 定义了 4 个 handlers 用来处理日志
        'file-db': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'logs/django-db.log',
            'formatter': 'verbose'
        },
        'file-request': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'logs/django-request.log',
            'formatter': 'verbose'
        },
        'file-server': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'logs/django-server.log',
            'formatter': 'basic'
        },
        'file-ui': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'logs/django-ui.log',
            'formatter': 'verbose'
        },
    },
    'loggers': {    #  4 个日志处理入口
        'django.request': {
            'handlers': ['file-request'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['file-server'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['file-db'],
            'level': 'DEBUG',
            'propagate': False,
            'formatter': 'verbose'
        },
        'ansible.ui': {        # 自定义日志入口
            'handlers': ['file-ui'],    # 调用 file-ui 的 handler 处理日志
            'level': 'DEBUG',    # 记录 debug 及更高级别的日志
            'propagate': False,        # 避免与其他模块的日志系统冲突
            'formatter': 'verbose'    # 调用定义的 verbose 格式记录日志
        },
    },
}

# 生成 admin 静态资源后就删除该行，它会与其他配置冲突
# STATIC_ROOT = 'static'